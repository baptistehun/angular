Mock Service
============
1/ Installer InMemoryWebApi : npm install angular-in-memory-web-api --save
2/ Copier in-memory-data.service.ts dans src/app/
3/ Dans app.module ajouter sans toucher la section imports
    import { HttpClientModule }    from '@angular/common/http';
    import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
    import { InMemoryDataService }  from './in-memory-data.service';
    // /!\ la section imports est un peu complexe
4/ Dans la section imports il faut ajouter:
    HttpClientModule,
    HttpClientInMemoryWebApiModule.forRoot(
      InMemoryDataService, { dataEncapsulation: false }
    )
5/ Dans Environment ajouter la variable gamesUrl: 'api/games',
6/ Dans GameService ajouter
    import { HttpClient, HttpHeaders } from '@angular/common/http';
    import { environment } from '../environments/environment';
7/ Injecter http: HttpClient
8/ Dans getGames remplacer le code :
    // return of(VIDEOGAMES.sort((x, y) => x.id - y.id));
    return this.http.get<VideoGame[]>(environment.gamesUrl);
9/ Pourquoi la signature de la méthode ne change pas ?
10/ Tester
11/ Dans getGame mettre à jour le code pour l'URL api/games/1 pour l'id 1
12/ Tester, remarquer l'asynchronisme, pourquoi nbView reste à 0 ?
13/ Après les imports ajouter le code suivant:
    const httpOptions = {
        headers: new HttpHeaders({ 'Content-Type': 'application/json' })
    };
14/ Ajouter la méthode
    updateGame (game: VideoGame): Observable<any> {
        console.log(`updated game id=${game.id}`);
        return this.http.put(environment.gamesUrl, game, httpOptions);
    }
15/ Modifier GameDetailComponent la méthode suivante:
    getGame(): void {
        const id = +this.route.snapshot.paramMap.get('id');
        this.gameService.getGame(id)
            .subscribe(game => {
                this.game = game;
                this.incrementNbView();
            });
    }
16/ Tester, le dashboard ne fonctionne plus correctement car il n'est pas branché au service, ceci sera corrigé dans la partie 2
17/ Dans game-detail.component.html ajouter à coté de l'input <button (click)="save()">save</button>
18/ Dans GameDetailComponent ajouter
    save(): void {
        this.gameService.updateGame(this.game)
            .subscribe(() => this.goBack());
    }
19/ Tester, il est normal que le dashboard ne voit pas les modifications, mais games devrait les voirs
20/ Dans GameService ajouter
    deleteGame (id: number): Observable<VideoGame> {
        console.log(`delete game id=${id}`);
        return this.http.delete<VideoGame>(`${environment.gamesUrl}/${id}`, httpOptions);
    }
21/ Dans GamesComponent ajouter
    delete(game: VideoGame): void {
        this.games = this.games.filter(g => g !== game);
        this.gameService.deleteGame(game.id).subscribe();
    }
22/ Dans games.omponent.html ajouter sur chaque ligne
        <i class="material-icons" (click)="delete(game)">
          delete
        </i>

TODO in part 2 car ne marche pas en part1
20/ Dans GameService ajouter
    addGame (game: VideoGame): Observable<VideoGame> {
        console.log(`add game id=${game.id}`);
        return this.http.post<VideoGame>(environment.gamesUrl, game, httpOptions);
    }
21/ Dans GamesComponent ajouter
    add(id: number, title: string, editor: string, year: number): void {
        const game: VideoGame = new VideoGame();
        game.id = id;
        game.title = title;
        game.editor = editor;
        game.year = year;
        game.consoles = [];
        game.nbView = 1;
        game.play = '';
        this.gameService.addGame(game)
        .subscribe(g => {
            this.games.push(game);
        });
    }


