Electron
========
0/ Dupliquer RVG en RVG-electron
1/ Installer electron: npm install electron --save-dev
2/ Dans index.html changer le base href en <base href="./">
    Puis enlever unsafe eval dans la section Content Security Policy
3/ Ecraser src/main.ts par le code suivant:
  import { app, BrowserWindow, screen } from 'electron';
import * as path from 'path';
import * as url from 'url';

let win, serve;
const args = process.argv.slice(1);
serve = args.some(val => val === '--serve');

function createWindow() {

  const electronScreen = screen;
  const size = electronScreen.getPrimaryDisplay().workAreaSize;

  // Create the browser window.
  win = new BrowserWindow({
    x: 0,
    y: 0,
    width: size.width,
    height: size.height,
    webPreferences: {
      nodeIntegration: true,
    },
  });

  win.loadURL(url.format({
    pathname: path.join(__dirname, 'dist/RVG/index.html'),
    protocol: 'file:',
    slashes: true
  }));


  if (serve) {
    win.webContents.openDevTools();
  }

  // Emitted when the window is closed.
  win.on('closed', () => {
    // Dereference the window object, usually you would store window
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    win = null;
  });

}

try {

  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  // Some APIs can only be used after this event occurs.
  app.on('ready', createWindow);

  // Quit when all windows are closed.
  app.on('window-all-closed', () => {
    // On OS X it is common for applications and their menu bar
    // to stay active until the user quits explicitly with Cmd + Q
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (win === null) {
      createWindow();
    }
  });

} catch (e) {
  // Catch Error
  // throw e;
}
4/ Lier le fichier js à la fin de index.html
5/ Dans packages.json mettre à jour la 1ère section par (attention garder les dependencies)
  {
    "name": "rvg-electron",
    "version": "0.0.0",
    "license": "MIT",
    "main": "main.js", 
    "scripts": {
      "ng": "ng",
      "start": "ng serve",
      "build": "ng build",
      "test": "ng test",
      "lint": "ng lint",
      "e2e": "ng e2e",
      "electron": "electron .", 
      "electron-build": "ng build  && electron ."
    },
    // ...omitted
  }
5/ Exécuter avec npm run electron-build
Bonus
6/ Installer le packager 
  npm install electron-packager -g
  npm install electron-packager --save-dev
7/ Exécuter electron-packager . --platform=win32
